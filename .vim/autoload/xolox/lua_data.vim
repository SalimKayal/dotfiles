" Vim auto-load script
" Author: Peter Odding <peter@peterodding.com>
" Last Change: June 15, 2011
" URL: http://peterodding.com/code/vim/lua-ftplugin

" This script contains static user completion data based
" on the Lua 5.1 reference manual and implementation.

" Enable line continuation.
let s:cpo_save = &cpo
set cpoptions-=C

" Keywords. {{{1
let g:xolox#lua_data#keywords = [
      \ { 'word': 'and', 'kind': 'k' },
      \ { 'word': 'break', 'kind': 'k' },
      \ { 'word': 'do', 'kind': 'k' },
      \ { 'word': 'else', 'kind': 'k' },
      \ { 'word': 'elseif', 'kind': 'k' },
      \ { 'word': 'end', 'kind': 'k' },
      \ { 'word': 'false', 'kind': 'k' },
      \ { 'word': 'for', 'kind': 'k' },
      \ { 'word': 'function', 'kind': 'k' },
      \ { 'word': 'if', 'kind': 'k' },
      \ { 'word': 'in', 'kind': 'k' },
      \ { 'word': 'local', 'kind': 'k' },
      \ { 'word': 'nil', 'kind': 'k' },
      \ { 'word': 'not', 'kind': 'k' },
      \ { 'word': 'or', 'kind': 'k' },
      \ { 'word': 'repeat', 'kind': 'k' },
      \ { 'word': 'return', 'kind': 'k' },
      \ { 'word': 'then', 'kind': 'k' },
      \ { 'word': 'true', 'kind': 'k' },
      \ { 'word': 'until', 'kind': 'k' },
      \ { 'word': 'while', 'kind': 'k' } ]

" Global variables. {{{1
let g:xolox#lua_data#globals = [
\ { 'word': "arg", 'kind': 'v' },
\ { 'word': "assert()", 'kind': 'f' },
\ { 'word': "batchcompare()", 'kind': 'f' },
\ { 'word': "browse()", 'kind': 'f' },
\ { 'word': "camera", 'kind': 'v' },
\ { 'word': "collectgarbage()", 'kind': 'f' },
\ { 'word': "coroutine", 'kind': 'v' },
\ { 'word': "DataSetLabelMe", 'kind': 'v' },
\ { 'word': "debug", 'kind': 'v' },
\ { 'word': "dofile()", 'kind': 'f' },
\ { 'word': "dok", 'kind': 'v' },
\ { 'word': "error()", 'kind': 'f' },
\ { 'word': "exit()", 'kind': 'f' },
\ { 'word': "_G", 'kind': 'v' },
\ { 'word': "gcinfo()", 'kind': 'f' },
\ { 'word': "getfenv()", 'kind': 'f' },
\ { 'word': "getmetatable()", 'kind': 'f' },
\ { 'word': "gnuplot", 'kind': 'v' },
\ { 'word': "help()", 'kind': 'f' },
\ { 'word': "image", 'kind': 'v' },
\ { 'word': "import()", 'kind': 'f' },
\ { 'word': "inline", 'kind': 'v' },
\ { 'word': "install()", 'kind': 'f' },
\ { 'word': "io", 'kind': 'v' },
\ { 'word': "ipairs()", 'kind': 'f' },
\ { 'word': "libcamopencv", 'kind': 'v' },
\ { 'word': "libv4l", 'kind': 'v' },
\ { 'word': "load()", 'kind': 'f' },
\ { 'word': "loaddefaultlibs()", 'kind': 'f' },
\ { 'word': "loadfile()", 'kind': 'f' },
\ { 'word': "loadstring()", 'kind': 'f' },
\ { 'word': "lognormal()", 'kind': 'f' },
\ { 'word': "loguniform()", 'kind': 'f' },
\ { 'word': "math", 'kind': 'v' },
\ { 'word': "module()", 'kind': 'f' },
\ { 'word': "newproxy()", 'kind': 'f' },
\ { 'word': "next()", 'kind': 'f' },
\ { 'word': "nn", 'kind': 'v' },
\ { 'word': "nnx", 'kind': 'v' },
\ { 'word': "optim", 'kind': 'v' },
\ { 'word': "os", 'kind': 'v' },
\ { 'word': "package", 'kind': 'v' },
\ { 'word': "pairs()", 'kind': 'f' },
\ { 'word': "paths", 'kind': 'v' },
\ { 'word': "pcall()", 'kind': 'f' },
\ { 'word': "_preloaded_", 'kind': 'v' },
\ { 'word': "print()", 'kind': 'f' },
\ { 'word': "print_old()", 'kind': 'f' },
\ { 'word': "_PROMPT", 'kind': 'v' },
\ { 'word': "_PROMPT2", 'kind': 'v' },
\ { 'word': "_protect_", 'kind': 'v' },
\ { 'word': "qt", 'kind': 'v' },
\ { 'word': "qtide", 'kind': 'v' },
\ { 'word': "qtsvg", 'kind': 'v' },
\ { 'word': "qtuiloader", 'kind': 'v' },
\ { 'word': "qtwidget", 'kind': 'v' },
\ { 'word': "rawequal()", 'kind': 'f' },
\ { 'word': "rawget()", 'kind': 'f' },
\ { 'word': "rawset()", 'kind': 'f' },
\ { 'word': "require()", 'kind': 'f' },
\ { 'word': "select()", 'kind': 'f' },
\ { 'word': "setfenv()", 'kind': 'f' },
\ { 'word': "setmetatable()", 'kind': 'f' },
\ { 'word': "string", 'kind': 'v' },
\ { 'word': "sys", 'kind': 'v' },
\ { 'word': "table", 'kind': 'v' },
\ { 'word': "tonumber()", 'kind': 'f' },
\ { 'word': "torch", 'kind': 'v' },
\ { 'word': "tostring()", 'kind': 'f' },
\ { 'word': "type()", 'kind': 'f' },
\ { 'word': "unpack()", 'kind': 'f' },
\ { 'word': "_VERSION", 'kind': 'v' },
\ { 'word': "who()", 'kind': 'f' },
\ { 'word': "wrap", 'kind': 'v' },
\ { 'word': "xerror()", 'kind': 'f' },
\ { 'word': "xlua", 'kind': 'v' },
\ { 'word': "xpcall()", 'kind': 'f' },
\ { 'word': "xprint()", 'kind': 'f' },
\ { 'word': "xrequire()", 'kind': 'f' },]

" Standard library identifiers. {{{1
let g:xolox#lua_data#library = [
\ { 'word': "camera.testme()", 'kind': 'f' },
\ { 'word': "coroutine.create()", 'kind': 'f' },
\ { 'word': "coroutine.resume()", 'kind': 'f' },
\ { 'word': "coroutine.running()", 'kind': 'f' },
\ { 'word': "coroutine.status()", 'kind': 'f' },
\ { 'word': "coroutine.wrap()", 'kind': 'f' },
\ { 'word': "coroutine.yield()", 'kind': 'f' },
\ { 'word': "debug.debug()", 'kind': 'f' },
\ { 'word': "debug.getfenv()", 'kind': 'f' },
\ { 'word': "debug.gethook()", 'kind': 'f' },
\ { 'word': "debug.getinfo()", 'kind': 'f' },
\ { 'word': "debug.getlocal()", 'kind': 'f' },
\ { 'word': "debug.getmetatable()", 'kind': 'f' },
\ { 'word': "debug.getregistry()", 'kind': 'f' },
\ { 'word': "debug.getupvalue()", 'kind': 'f' },
\ { 'word': "debug.setfenv()", 'kind': 'f' },
\ { 'word': "debug.sethook()", 'kind': 'f' },
\ { 'word': "debug.setlocal()", 'kind': 'f' },
\ { 'word': "debug.setmetatable()", 'kind': 'f' },
\ { 'word': "debug.setupvalue()", 'kind': 'f' },
\ { 'word': "debug.traceback()", 'kind': 'f' },
\ { 'word': "dok.browse()", 'kind': 'f' },
\ { 'word': "dok.cleanText()", 'kind': 'f' },
\ { 'word': "dok.colors", 'kind': 'm' },
\ { 'word': "dok.dirapply()", 'kind': 'f' },
\ { 'word': "dok.dok2html()", 'kind': 'f' },
\ { 'word': "dok.dontusecolors()", 'kind': 'f' },
\ { 'word': "dok.error()", 'kind': 'f' },
\ { 'word': "dok.help()", 'kind': 'f' },
\ { 'word': "dok.html2funcs()", 'kind': 'f' },
\ { 'word': "dok.inline", 'kind': 'm' },
\ { 'word': "dok.installsearch()", 'kind': 'f' },
\ { 'word': "dok.link2wikilink()", 'kind': 'f' },
\ { 'word': "dok.linkText()", 'kind': 'f' },
\ { 'word': "dok.linkURL()", 'kind': 'f' },
\ { 'word': "dok.options", 'kind': 'm' },
\ { 'word': "dok.parseSection()", 'kind': 'f' },
\ { 'word': "dok.pictAlt()", 'kind': 'f' },
\ { 'word': "dok.pictClass()", 'kind': 'f' },
\ { 'word': "dok.pictHeight()", 'kind': 'f' },
\ { 'word': "dok.pictURL()", 'kind': 'f' },
\ { 'word': "dok.pictWidth()", 'kind': 'f' },
\ { 'word': "dok.refresh()", 'kind': 'f' },
\ { 'word': "dok.sectionapply()", 'kind': 'f' },
\ { 'word': "dok.stylize()", 'kind': 'f' },
\ { 'word': "dok.unpack()", 'kind': 'f' },
\ { 'word': "dok.usage()", 'kind': 'f' },
\ { 'word': "dok.usecolors()", 'kind': 'f' },
\ { 'word': "gnuplot.axis()", 'kind': 'f' },
\ { 'word': "gnuplot.bar()", 'kind': 'f' },
\ { 'word': "gnuplot.close()", 'kind': 'f' },
\ { 'word': "gnuplot.closeall()", 'kind': 'f' },
\ { 'word': "gnuplot.epsfigure()", 'kind': 'f' },
\ { 'word': "gnuplot.figprint()", 'kind': 'f' },
\ { 'word': "gnuplot.figure()", 'kind': 'f' },
\ { 'word': "gnuplot.grid()", 'kind': 'f' },
\ { 'word': "gnuplot.hist()", 'kind': 'f' },
\ { 'word': "gnuplot.histc()", 'kind': 'f' },
\ { 'word': "gnuplot.imagesc()", 'kind': 'f' },
\ { 'word': "gnuplot.movelegend()", 'kind': 'f' },
\ { 'word': "gnuplot.plot()", 'kind': 'f' },
\ { 'word': "gnuplot.plotflush()", 'kind': 'f' },
\ { 'word': "gnuplot.pngfigure()", 'kind': 'f' },
\ { 'word': "gnuplot.raw()", 'kind': 'f' },
\ { 'word': "gnuplot.setgnuplotexe()", 'kind': 'f' },
\ { 'word': "gnuplot.setterm()", 'kind': 'f' },
\ { 'word': "gnuplot.splot()", 'kind': 'f' },
\ { 'word': "gnuplot.title()", 'kind': 'f' },
\ { 'word': "gnuplot.xlabel()", 'kind': 'f' },
\ { 'word': "gnuplot.ylabel()", 'kind': 'f' },
\ { 'word': "gnuplot.zlabel()", 'kind': 'f' },
\ { 'word': "image.Camera", 'kind': 'm' },
\ { 'word': "image.colormap()", 'kind': 'f' },
\ { 'word': "image.convolve()", 'kind': 'f' },
\ { 'word': "image.crop()", 'kind': 'f' },
\ { 'word': "image.display()", 'kind': 'f' },
\ { 'word': "image.double", 'kind': 'm' },
\ { 'word': "image.float", 'kind': 'm' },
\ { 'word': "image.gaussian()", 'kind': 'f' },
\ { 'word': "image.gaussian1D()", 'kind': 'f' },
\ { 'word': "image.gaussianpyramid()", 'kind': 'f' },
\ { 'word': "image.getJPGsize()", 'kind': 'f' },
\ { 'word': "image.getPNGsize()", 'kind': 'f' },
\ { 'word': "image.hflip()", 'kind': 'f' },
\ { 'word': "image.hsl2rgb()", 'kind': 'f' },
\ { 'word': "image.hsv2rgb()", 'kind': 'f' },
\ { 'word': "image.laplacian()", 'kind': 'f' },
\ { 'word': "image.lena()", 'kind': 'f' },
\ { 'word': "image.load()", 'kind': 'f' },
\ { 'word': "image.loadJPG()", 'kind': 'f' },
\ { 'word': "image.loadPNG()", 'kind': 'f' },
\ { 'word': "image.loadPPM()", 'kind': 'f' },
\ { 'word': "image.minmax()", 'kind': 'f' },
\ { 'word': "image.rgb2hsl()", 'kind': 'f' },
\ { 'word': "image.rgb2hsv()", 'kind': 'f' },
\ { 'word': "image.rgb2lab()", 'kind': 'f' },
\ { 'word': "image.rgb2nrgb()", 'kind': 'f' },
\ { 'word': "image.rgb2y()", 'kind': 'f' },
\ { 'word': "image.rgb2yuv()", 'kind': 'f' },
\ { 'word': "image.rotate()", 'kind': 'f' },
\ { 'word': "image.save()", 'kind': 'f' },
\ { 'word': "image.saveJPG()", 'kind': 'f' },
\ { 'word': "image.savePGM()", 'kind': 'f' },
\ { 'word': "image.savePNG()", 'kind': 'f' },
\ { 'word': "image.savePPM()", 'kind': 'f' },
\ { 'word': "image.scale()", 'kind': 'f' },
\ { 'word': "image.toDisplayTensor()", 'kind': 'f' },
\ { 'word': "image.translate()", 'kind': 'f' },
\ { 'word': "image.vflip()", 'kind': 'f' },
\ { 'word': "image.warp()", 'kind': 'f' },
\ { 'word': "image.window()", 'kind': 'f' },
\ { 'word': "image.yuv2rgb()", 'kind': 'f' },
\ { 'word': "inline.current_flags", 'kind': 'm' },
\ { 'word': "inline.current_headers", 'kind': 'm' },
\ { 'word': "inline.current_includepaths", 'kind': 'm' },
\ { 'word': "inline.current_libpaths", 'kind': 'm' },
\ { 'word': "inline.current_libs", 'kind': 'm' },
\ { 'word': "inline.current_localheaders", 'kind': 'm' },
\ { 'word': "inline.current_path", 'kind': 'm' },
\ { 'word': "inline.default_all()", 'kind': 'f' },
\ { 'word': "inline.default_flags()", 'kind': 'f' },
\ { 'word': "inline.default_headers()", 'kind': 'f' },
\ { 'word': "inline.default_headers_local()", 'kind': 'f' },
\ { 'word': "inline.default_includepaths()", 'kind': 'f' },
\ { 'word': "inline.default_libpaths()", 'kind': 'f' },
\ { 'word': "inline.default_libs()", 'kind': 'f' },
\ { 'word': "inline.default_preamble()", 'kind': 'f' },
\ { 'word': "inline.exec()", 'kind': 'f' },
\ { 'word': "inline.flags()", 'kind': 'f' },
\ { 'word': "inline.flush()", 'kind': 'f' },
\ { 'word': "inline.get_env()", 'kind': 'f' },
\ { 'word': "inline.headers()", 'kind': 'f' },
\ { 'word': "inline._headers_c_", 'kind': 'm' },
\ { 'word': "inline._headers_local_c_", 'kind': 'm' },
\ { 'word': "inline.includepaths()", 'kind': 'f' },
\ { 'word': "inline.libpaths()", 'kind': 'f' },
\ { 'word': "inline.libs()", 'kind': 'f' },
\ { 'word': "inline.load()", 'kind': 'f' },
\ { 'word': "inline.loaded", 'kind': 'm' },
\ { 'word': "inline.localheaders()", 'kind': 'f' },
\ { 'word': "inline._M", 'kind': 'm' },
\ { 'word': "inline._make_c_", 'kind': 'm' },
\ { 'word': "inline._make_flags_", 'kind': 'm' },
\ { 'word': "inline._make_includepath_", 'kind': 'm' },
\ { 'word': "inline._make_libpath_", 'kind': 'm' },
\ { 'word': "inline._make_libs_", 'kind': 'm' },
\ { 'word': "inline._make_path_", 'kind': 'm' },
\ { 'word': "inline._mkdir_", 'kind': 'm' },
\ { 'word': "inline._NAME", 'kind': 'm' },
\ { 'word': "inline._PACKAGE", 'kind': 'm' },
\ { 'word': "inline.preamble()", 'kind': 'f' },
\ { 'word': "inline._rmdir_", 'kind': 'm' },
\ { 'word': "inline._template_c_", 'kind': 'm' },
\ { 'word': "inline._template_c_default_", 'kind': 'm' },
\ { 'word': "inline.testme()", 'kind': 'f' },
\ { 'word': "inline.verbose", 'kind': 'm' },
\ { 'word': "io.close()", 'kind': 'f' },
\ { 'word': "io.flush()", 'kind': 'f' },
\ { 'word': "io.input()", 'kind': 'f' },
\ { 'word': "io.lines()", 'kind': 'f' },
\ { 'word': "io.open()", 'kind': 'f' },
\ { 'word': "io.output()", 'kind': 'f' },
\ { 'word': "io.popen()", 'kind': 'f' },
\ { 'word': "io.read()", 'kind': 'f' },
\ { 'word': "io.stderr", 'kind': 'm' },
\ { 'word': "io.stdin", 'kind': 'm' },
\ { 'word': "io.stdout", 'kind': 'm' },
\ { 'word': "io.tmpfile()", 'kind': 'f' },
\ { 'word': "io.type()", 'kind': 'f' },
\ { 'word': "io.write()", 'kind': 'f' },
\ { 'word': "libcamopencv.grabFrame()", 'kind': 'f' },
\ { 'word': "libcamopencv.initCam()", 'kind': 'f' },
\ { 'word': "libcamopencv.releaseCam()", 'kind': 'f' },
\ { 'word': "libv4l.adjustManualFocus()", 'kind': 'f' },
\ { 'word': "libv4l.grabFrame()", 'kind': 'f' },
\ { 'word': "libv4l.init()", 'kind': 'f' },
\ { 'word': "libv4l.releaseCam()", 'kind': 'f' },
\ { 'word': "libv4l.setFocusType()", 'kind': 'f' },
\ { 'word': "math.abs()", 'kind': 'f' },
\ { 'word': "math.acos()", 'kind': 'f' },
\ { 'word': "math.asin()", 'kind': 'f' },
\ { 'word': "math.atan()", 'kind': 'f' },
\ { 'word': "math.atan2()", 'kind': 'f' },
\ { 'word': "math.ceil()", 'kind': 'f' },
\ { 'word': "math.cos()", 'kind': 'f' },
\ { 'word': "math.cosh()", 'kind': 'f' },
\ { 'word': "math.deg()", 'kind': 'f' },
\ { 'word': "math.exp()", 'kind': 'f' },
\ { 'word': "math.floor()", 'kind': 'f' },
\ { 'word': "math.fmod()", 'kind': 'f' },
\ { 'word': "math.frexp()", 'kind': 'f' },
\ { 'word': "math.huge", 'kind': 'm' },
\ { 'word': "math.ldexp()", 'kind': 'f' },
\ { 'word': "math.log()", 'kind': 'f' },
\ { 'word': "math.log10()", 'kind': 'f' },
\ { 'word': "math.max()", 'kind': 'f' },
\ { 'word': "math.min()", 'kind': 'f' },
\ { 'word': "math.mod()", 'kind': 'f' },
\ { 'word': "math.modf()", 'kind': 'f' },
\ { 'word': "math.pi", 'kind': 'm' },
\ { 'word': "math.pow()", 'kind': 'f' },
\ { 'word': "math.rad()", 'kind': 'f' },
\ { 'word': "math.random()", 'kind': 'f' },
\ { 'word': "math.randomseed()", 'kind': 'f' },
\ { 'word': "math.sin()", 'kind': 'f' },
\ { 'word': "math.sinh()", 'kind': 'f' },
\ { 'word': "math.sqrt()", 'kind': 'f' },
\ { 'word': "math.tan()", 'kind': 'f' },
\ { 'word': "math.tanh()", 'kind': 'f' },
\ { 'word': "nn.Abs", 'kind': 'm' },
\ { 'word': "nn.AbsCriterion", 'kind': 'm' },
\ { 'word': "nn.Add", 'kind': 'm' },
\ { 'word': "nn.ASGDOptimization", 'kind': 'm' },
\ { 'word': "nn.BatchOptimization", 'kind': 'm' },
\ { 'word': "nn.BatchTrainer", 'kind': 'm' },
\ { 'word': "nn.CAddTable", 'kind': 'm' },
\ { 'word': "nn.CDivTable", 'kind': 'm' },
\ { 'word': "nn.CGOptimization", 'kind': 'm' },
\ { 'word': "nn.ClassNLLCriterion", 'kind': 'm' },
\ { 'word': "nn.CMul", 'kind': 'm' },
\ { 'word': "nn.CMulTable", 'kind': 'm' },
\ { 'word': "nn.Concat", 'kind': 'm' },
\ { 'word': "nn.ConcatTable", 'kind': 'm' },
\ { 'word': "nn.ConfusionMatrix", 'kind': 'm' },
\ { 'word': "nn.Copy", 'kind': 'm' },
\ { 'word': "nn.CosineDistance", 'kind': 'm' },
\ { 'word': "nn.CosineEmbeddingCriterion", 'kind': 'm' },
\ { 'word': "nn.Criterion", 'kind': 'm' },
\ { 'word': "nn.CriterionTable", 'kind': 'm' },
\ { 'word': "nn.CSubTable", 'kind': 'm' },
\ { 'word': "nn.Cuda", 'kind': 'm' },
\ { 'word': "nn.DataList", 'kind': 'm' },
\ { 'word': "nn.DataSet", 'kind': 'm' },
\ { 'word': "nn.DistKLDivCriterion", 'kind': 'm' },
\ { 'word': "nn.DistMarginCriterion", 'kind': 'm' },
\ { 'word': "nn.DistNLLCriterion", 'kind': 'm' },
\ { 'word': "nn.DotProduct", 'kind': 'm' },
\ { 'word': "nn.Double", 'kind': 'm' },
\ { 'word': "nn.Euclidean", 'kind': 'm' },
\ { 'word': "nn.Exp", 'kind': 'm' },
\ { 'word': "nn.Float", 'kind': 'm' },
\ { 'word': "nn.FunctionWrapper", 'kind': 'm' },
\ { 'word': "nn.GeneticSGDOptimization", 'kind': 'm' },
\ { 'word': "nn.HardShrink", 'kind': 'm' },
\ { 'word': "nn.HardTanh", 'kind': 'm' },
\ { 'word': "nn.HingeEmbeddingCriterion", 'kind': 'm' },
\ { 'word': "nn.Identity", 'kind': 'm' },
\ { 'word': "nn.Jacobian", 'kind': 'm' },
\ { 'word': "nn.JoinTable", 'kind': 'm' },
\ { 'word': "nn.KLDivCriterion", 'kind': 'm' },
\ { 'word': "nn.L1HingeEmbeddingCriterion", 'kind': 'm' },
\ { 'word': "nn.LBFGSOptimization", 'kind': 'm' },
\ { 'word': "nn.Linear", 'kind': 'm' },
\ { 'word': "nn.Log", 'kind': 'm' },
\ { 'word': "nn.Logger", 'kind': 'm' },
\ { 'word': "nn.LogSigmoid", 'kind': 'm' },
\ { 'word': "nn.LogSoftMax", 'kind': 'm' },
\ { 'word': "nn.LookupTable", 'kind': 'm' },
\ { 'word': "nn.MarginCriterion", 'kind': 'm' },
\ { 'word': "nn.MarginRankingCriterion", 'kind': 'm' },
\ { 'word': "nn.Max", 'kind': 'm' },
\ { 'word': "nn.Mean", 'kind': 'm' },
\ { 'word': "nn.Min", 'kind': 'm' },
\ { 'word': "nn.Minus", 'kind': 'm' },
\ { 'word': "nn.Module", 'kind': 'm' },
\ { 'word': "nn.MSECriterion", 'kind': 'm' },
\ { 'word': "nn.Mul", 'kind': 'm' },
\ { 'word': "nn.MultiCriterion", 'kind': 'm' },
\ { 'word': "nn.MultiLabelMarginCriterion", 'kind': 'm' },
\ { 'word': "nn.MultiMarginCriterion", 'kind': 'm' },
\ { 'word': "nn.Narrow", 'kind': 'm' },
\ { 'word': "nn.newCGOptimization", 'kind': 'm' },
\ { 'word': "nn.OmpModule", 'kind': 'm' },
\ { 'word': "nn.OnlineTrainer", 'kind': 'm' },
\ { 'word': "nn.Optimization", 'kind': 'm' },
\ { 'word': "nn.PairwiseDistance", 'kind': 'm' },
\ { 'word': "nn.Parallel", 'kind': 'm' },
\ { 'word': "nn.ParallelTable", 'kind': 'm' },
\ { 'word': "nn.Power", 'kind': 'm' },
\ { 'word': "nn.Probe", 'kind': 'm' },
\ { 'word': "nn.Replicate", 'kind': 'm' },
\ { 'word': "nn.Reshape", 'kind': 'm' },
\ { 'word': "nn.Select", 'kind': 'm' },
\ { 'word': "nn.Sequential", 'kind': 'm' },
\ { 'word': "nn.SGDOptimization", 'kind': 'm' },
\ { 'word': "nn.Sigmoid", 'kind': 'm' },
\ { 'word': "nn.SNESOptimization", 'kind': 'm' },
\ { 'word': "nn.SoftMax", 'kind': 'm' },
\ { 'word': "nn.SoftMin", 'kind': 'm' },
\ { 'word': "nn.SoftPlus", 'kind': 'm' },
\ { 'word': "nn.SoftShrink", 'kind': 'm' },
\ { 'word': "nn.SoftSign", 'kind': 'm' },
\ { 'word': "nn.SparseCriterion", 'kind': 'm' },
\ { 'word': "nn.SparseLinear", 'kind': 'm' },
\ { 'word': "nn.SpatialClassifier", 'kind': 'm' },
\ { 'word': "nn.SpatialClassNLLCriterion", 'kind': 'm' },
\ { 'word': "nn.SpatialColorTransform", 'kind': 'm' },
\ { 'word': "nn.SpatialContrastiveNormalization", 'kind': 'm' },
\ { 'word': "nn.SpatialConvolution", 'kind': 'm' },
\ { 'word': "nn.SpatialConvolutionMap", 'kind': 'm' },
\ { 'word': "nn.SpatialConvolutionSparse", 'kind': 'm' },
\ { 'word': "nn.SpatialDivisiveNormalization", 'kind': 'm' },
\ { 'word': "nn.SpatialDownSampling", 'kind': 'm' },
\ { 'word': "nn.SpatialFovea", 'kind': 'm' },
\ { 'word': "nn.SpatialGraph", 'kind': 'm' },
\ { 'word': "nn.SpatialLinear", 'kind': 'm' },
\ { 'word': "nn.SpatialLPPooling", 'kind': 'm' },
\ { 'word': "nn.SpatialMatching", 'kind': 'm' },
\ { 'word': "nn.SpatialMaxPooling", 'kind': 'm' },
\ { 'word': "nn.SpatialMaxSampling", 'kind': 'm' },
\ { 'word': "nn.SpatialMSECriterion", 'kind': 'm' },
\ { 'word': "nn.SpatialNormalization", 'kind': 'm' },
\ { 'word': "nn.SpatialPadding", 'kind': 'm' },
\ { 'word': "nn.SpatialPyramid", 'kind': 'm' },
\ { 'word': "nn.SpatialRadialMatching", 'kind': 'm' },
\ { 'word': "nn.SpatialRecursiveFovea", 'kind': 'm' },
\ { 'word': "nn.SpatialReSampling", 'kind': 'm' },
\ { 'word': "nn.SpatialReSamplingEx", 'kind': 'm' },
\ { 'word': "nn.SpatialSparseCriterion", 'kind': 'm' },
\ { 'word': "nn.SpatialSubSampling", 'kind': 'm' },
\ { 'word': "nn.SpatialSubtractiveNormalization", 'kind': 'm' },
\ { 'word': "nn.SpatialUpSampling", 'kind': 'm' },
\ { 'word': "nn.SpatialZeroPadding", 'kind': 'm' },
\ { 'word': "nn.SplitTable", 'kind': 'm' },
\ { 'word': "nn.Sqrt", 'kind': 'm' },
\ { 'word': "nn.Square", 'kind': 'm' },
\ { 'word': "nn.StochasticGradient", 'kind': 'm' },
\ { 'word': "nn.Sum", 'kind': 'm' },
\ { 'word': "nn.SuperCriterion", 'kind': 'm' },
\ { 'word': "nn.tables", 'kind': 'm' },
\ { 'word': "nn.Tanh", 'kind': 'm' },
\ { 'word': "nn.TemporalConvolution", 'kind': 'm' },
\ { 'word': "nn.TemporalSubSampling", 'kind': 'm' },
\ { 'word': "nn.test()", 'kind': 'f' },
\ { 'word': "nn.Threshold", 'kind': 'm' },
\ { 'word': "nn.Tic", 'kind': 'm' },
\ { 'word': "nn.Toc", 'kind': 'm' },
\ { 'word': "nn.Trainer", 'kind': 'm' },
\ { 'word': "nn.Type", 'kind': 'm' },
\ { 'word': "nn.VolumetricConvolution", 'kind': 'm' },
\ { 'word': "nn.WeightedEuclidean", 'kind': 'm' },
\ { 'word': "nnx.empty()", 'kind': 'f' },
\ { 'word': "nnx.flattenParameters()", 'kind': 'f' },
\ { 'word': "nnx.getDiagHessianParameters()", 'kind': 'f' },
\ { 'word': "nnx.getGradParameters()", 'kind': 'f' },
\ { 'word': "nnx.getParameters()", 'kind': 'f' },
\ { 'word': "nnx.test()", 'kind': 'f' },
\ { 'word': "nnx.test_omp()", 'kind': 'f' },
\ { 'word': "optim.asgd()", 'kind': 'f' },
\ { 'word': "optim.cg()", 'kind': 'f' },
\ { 'word': "optim.ConfusionMatrix", 'kind': 'm' },
\ { 'word': "optim.FistaLS()", 'kind': 'f' },
\ { 'word': "optim.lbfgs()", 'kind': 'f' },
\ { 'word': "optim.Logger", 'kind': 'm' },
\ { 'word': "optim.lswolfe()", 'kind': 'f' },
\ { 'word': "optim.polyinterp()", 'kind': 'f' },
\ { 'word': "optim.sgd()", 'kind': 'f' },
\ { 'word': "os.clock()", 'kind': 'f' },
\ { 'word': "os.date()", 'kind': 'f' },
\ { 'word': "os.difftime()", 'kind': 'f' },
\ { 'word': "os.execute()", 'kind': 'f' },
\ { 'word': "os.exit()", 'kind': 'f' },
\ { 'word': "os.getenv()", 'kind': 'f' },
\ { 'word': "os.remove()", 'kind': 'f' },
\ { 'word': "os.rename()", 'kind': 'f' },
\ { 'word': "os.setlocale()", 'kind': 'f' },
\ { 'word': "os.time()", 'kind': 'f' },
\ { 'word': "os.tmpname()", 'kind': 'f' },
\ { 'word': "package.config", 'kind': 'm' },
\ { 'word': "package.cpath", 'kind': 'm' },
\ { 'word': "package.loaded", 'kind': 'm' },
\ { 'word': "package.loaders", 'kind': 'm' },
\ { 'word': "package.loadlib()", 'kind': 'f' },
\ { 'word': "package.path", 'kind': 'm' },
\ { 'word': "package.preload", 'kind': 'm' },
\ { 'word': "package.seeall()", 'kind': 'f' },
\ { 'word': "paths.basename()", 'kind': 'f' },
\ { 'word': "paths.concat()", 'kind': 'f' },
\ { 'word': "paths.cwd()", 'kind': 'f' },
\ { 'word': "paths.dir()", 'kind': 'f' },
\ { 'word': "paths.dirname()", 'kind': 'f' },
\ { 'word': "paths.dirp()", 'kind': 'f' },
\ { 'word': "paths.dofile()", 'kind': 'f' },
\ { 'word': "paths.execdir()", 'kind': 'f' },
\ { 'word': "paths.filep()", 'kind': 'f' },
\ { 'word': "paths.files()", 'kind': 'f' },
\ { 'word': "paths.install_bin", 'kind': 'm' },
\ { 'word': "paths.install_bin_ridbus", 'kind': 'm' },
\ { 'word': "paths.install_bin_subdir", 'kind': 'm' },
\ { 'word': "paths.install_cmake", 'kind': 'm' },
\ { 'word': "paths.install_cmake_ridbus", 'kind': 'm' },
\ { 'word': "paths.install_cmake_subdir", 'kind': 'm' },
\ { 'word': "paths.install_dok", 'kind': 'm' },
\ { 'word': "paths.install_dokmedia", 'kind': 'm' },
\ { 'word': "paths.install_hlp", 'kind': 'm' },
\ { 'word': "paths.install_hlp_subdir", 'kind': 'm' },
\ { 'word': "paths.install_html", 'kind': 'm' },
\ { 'word': "paths.install_html_subdir", 'kind': 'm' },
\ { 'word': "paths.install_include", 'kind': 'm' },
\ { 'word': "paths.install_include_subdir", 'kind': 'm' },
\ { 'word': "paths.install_lib", 'kind': 'm' },
\ { 'word': "paths.install_lib_subdir", 'kind': 'm' },
\ { 'word': "paths.install_lua_cpath", 'kind': 'm' },
\ { 'word': "paths.install_lua_cpath_subdir", 'kind': 'm' },
\ { 'word': "paths.install_lua_path", 'kind': 'm' },
\ { 'word': "paths.install_lua_path_subdir", 'kind': 'm' },
\ { 'word': "paths.install_man", 'kind': 'm' },
\ { 'word': "paths.install_man_subdir", 'kind': 'm' },
\ { 'word': "paths.install_prefix", 'kind': 'm' },
\ { 'word': "paths.install_share", 'kind': 'm' },
\ { 'word': "paths.install_share_subdir", 'kind': 'm' },
\ { 'word': "paths._M", 'kind': 'm' },
\ { 'word': "paths._NAME", 'kind': 'm' },
\ { 'word': "paths._PACKAGE", 'kind': 'm' },
\ { 'word': "paths.require()", 'kind': 'f' },
\ { 'word': "paths.thisfile()", 'kind': 'f' },
\ { 'word': "_preloaded_.assert", 'kind': 'm' },
\ { 'word': "_preloaded_.collectgarbage", 'kind': 'm' },
\ { 'word': "_preloaded_.coroutine", 'kind': 'm' },
\ { 'word': "_preloaded_.debug", 'kind': 'm' },
\ { 'word': "_preloaded_.dofile", 'kind': 'm' },
\ { 'word': "_preloaded_.error", 'kind': 'm' },
\ { 'word': "_preloaded_.exit", 'kind': 'm' },
\ { 'word': "_preloaded_._G", 'kind': 'm' },
\ { 'word': "_preloaded_.gcinfo", 'kind': 'm' },
\ { 'word': "_preloaded_.getfenv", 'kind': 'm' },
\ { 'word': "_preloaded_.getmetatable", 'kind': 'm' },
\ { 'word': "_preloaded_.io", 'kind': 'm' },
\ { 'word': "_preloaded_.ipairs", 'kind': 'm' },
\ { 'word': "_preloaded_.load", 'kind': 'm' },
\ { 'word': "_preloaded_.loadfile", 'kind': 'm' },
\ { 'word': "_preloaded_.loadstring", 'kind': 'm' },
\ { 'word': "_preloaded_.math", 'kind': 'm' },
\ { 'word': "_preloaded_.module", 'kind': 'm' },
\ { 'word': "_preloaded_.newproxy", 'kind': 'm' },
\ { 'word': "_preloaded_.next", 'kind': 'm' },
\ { 'word': "_preloaded_.os", 'kind': 'm' },
\ { 'word': "_preloaded_.package", 'kind': 'm' },
\ { 'word': "_preloaded_.pairs", 'kind': 'm' },
\ { 'word': "_preloaded_.pcall", 'kind': 'm' },
\ { 'word': "_preloaded_._preloaded_", 'kind': 'm' },
\ { 'word': "_preloaded_.print", 'kind': 'm' },
\ { 'word': "_preloaded_.print_old", 'kind': 'm' },
\ { 'word': "_preloaded_._PROMPT", 'kind': 'm' },
\ { 'word': "_preloaded_._PROMPT2", 'kind': 'm' },
\ { 'word': "_preloaded_.rawequal", 'kind': 'm' },
\ { 'word': "_preloaded_.rawget", 'kind': 'm' },
\ { 'word': "_preloaded_.rawset", 'kind': 'm' },
\ { 'word': "_preloaded_.require", 'kind': 'm' },
\ { 'word': "_preloaded_.select", 'kind': 'm' },
\ { 'word': "_preloaded_.setfenv", 'kind': 'm' },
\ { 'word': "_preloaded_.setmetatable", 'kind': 'm' },
\ { 'word': "_preloaded_.string", 'kind': 'm' },
\ { 'word': "_preloaded_.table", 'kind': 'm' },
\ { 'word': "_preloaded_.tonumber", 'kind': 'm' },
\ { 'word': "_preloaded_.tostring", 'kind': 'm' },
\ { 'word': "_preloaded_.type", 'kind': 'm' },
\ { 'word': "_preloaded_.unpack", 'kind': 'm' },
\ { 'word': "_preloaded_._VERSION", 'kind': 'm' },
\ { 'word': "_preloaded_.who", 'kind': 'm' },
\ { 'word': "_preloaded_.xpcall", 'kind': 'm' },
\ { 'word': "qt.connect()", 'kind': 'f' },
\ { 'word': "qt.disconnect()", 'kind': 'f' },
\ { 'word': "qt.doevents()", 'kind': 'f' },
\ { 'word': "qtide.browser()", 'kind': 'f' },
\ { 'word': "qtide.doeditor()", 'kind': 'f' },
\ { 'word': "qtide.editor()", 'kind': 'f' },
\ { 'word': "qtide.help()", 'kind': 'f' },
\ { 'word': "qtide.helpurl", 'kind': 'm' },
\ { 'word': "qtide.inspector()", 'kind': 'f' },
\ { 'word': "qtide._M", 'kind': 'm' },
\ { 'word': "qtide._NAME", 'kind': 'm' },
\ { 'word': "qtide._PACKAGE", 'kind': 'm' },
\ { 'word': "qtide.preferences()", 'kind': 'f' },
\ { 'word': "qtide.setup()", 'kind': 'f' },
\ { 'word': "qtide.start()", 'kind': 'f' },
\ { 'word': "qt.isa()", 'kind': 'f' },
\ { 'word': "qt.pause()", 'kind': 'f' },
\ { 'word': "qt.QAction", 'kind': 'm' },
\ { 'word': "qt.QApplication", 'kind': 'm' },
\ { 'word': "qt.QBrush", 'kind': 'm' },
\ { 'word': "qt.QByteArray", 'kind': 'm' },
\ { 'word': "qt.qcall()", 'kind': 'f' },
\ { 'word': "qt.QColor", 'kind': 'm' },
\ { 'word': "qt.QColorDialog", 'kind': 'm' },
\ { 'word': "qt.QCoreApplication", 'kind': 'm' },
\ { 'word': "qt.QCursor", 'kind': 'm' },
\ { 'word': "qt.QDialog", 'kind': 'm' },
\ { 'word': "qt.QFileDialog", 'kind': 'm' },
\ { 'word': "qt.QFont", 'kind': 'm' },
\ { 'word': "qt.QFontDialog", 'kind': 'm' },
\ { 'word': "qt.QIcon", 'kind': 'm' },
\ { 'word': "qt.QImage", 'kind': 'm' },
\ { 'word': "qt.QKeySequence", 'kind': 'm' },
\ { 'word': "qt.QLine", 'kind': 'm' },
\ { 'word': "qt.QLineF", 'kind': 'm' },
\ { 'word': "qt.QLuaApplication", 'kind': 'm' },
\ { 'word': "qt.QLuaConsole", 'kind': 'm' },
\ { 'word': "qt.QLuaIde", 'kind': 'm' },
\ { 'word': "qt.QMainWindow", 'kind': 'm' },
\ { 'word': "qt.QMenu", 'kind': 'm' },
\ { 'word': "qt.QMenuBar", 'kind': 'm' },
\ { 'word': "qt.QObject", 'kind': 'm' },
\ { 'word': "qt.QPen", 'kind': 'm' },
\ { 'word': "qt.QPoint", 'kind': 'm' },
\ { 'word': "qt.QPointF", 'kind': 'm' },
\ { 'word': "qt.QRect", 'kind': 'm' },
\ { 'word': "qt.QRectF", 'kind': 'm' },
\ { 'word': "qt.QSize", 'kind': 'm' },
\ { 'word': "qt.QSizeF", 'kind': 'm' },
\ { 'word': "qt.QString", 'kind': 'm' },
\ { 'word': "qt.QStringList", 'kind': 'm' },
\ { 'word': "qt.QSvgRenderer", 'kind': 'm' },
\ { 'word': "qt.QSvgWidget", 'kind': 'm' },
\ { 'word': "qt.QTimer", 'kind': 'm' },
\ { 'word': "qt.QtLuaAction", 'kind': 'm' },
\ { 'word': "qt.QtLuaEngine", 'kind': 'm' },
\ { 'word': "qt.QtLuaListener", 'kind': 'm' },
\ { 'word': "qt.QtLuaMethodInfo", 'kind': 'm' },
\ { 'word': "qt.QtLuaPainter", 'kind': 'm' },
\ { 'word': "qt.QtLuaPrinter", 'kind': 'm' },
\ { 'word': "qt.QtLuaPropertyInfo", 'kind': 'm' },
\ { 'word': "qt.QtLuaSvgGenerator", 'kind': 'm' },
\ { 'word': "qt.QTransform", 'kind': 'm' },
\ { 'word': "qt.QUiLoader", 'kind': 'm' },
\ { 'word': "qt.QUrl", 'kind': 'm' },
\ { 'word': "qt.QVariantList", 'kind': 'm' },
\ { 'word': "qt.QVariantMap", 'kind': 'm' },
\ { 'word': "qt.QWebView", 'kind': 'm' },
\ { 'word': "qt.QWidget", 'kind': 'm' },
\ { 'word': "qt.require()", 'kind': 'f' },
\ { 'word': "qt.resume()", 'kind': 'f' },
\ { 'word': "qtsvg.loadsvg()", 'kind': 'f' },
\ { 'word': "qtsvg._M", 'kind': 'm' },
\ { 'word': "qtsvg._NAME", 'kind': 'm' },
\ { 'word': "qtsvg._PACKAGE", 'kind': 'm' },
\ { 'word': "qtsvg.paintsvg()", 'kind': 'f' },
\ { 'word': "qt.type()", 'kind': 'f' },
\ { 'word': "qt.typename()", 'kind': 'f' },
\ { 'word': "qtuiloader.availableWidgets()", 'kind': 'f' },
\ { 'word': "qtuiloader.createAction()", 'kind': 'f' },
\ { 'word': "qtuiloader.createActionGroup()", 'kind': 'f' },
\ { 'word': "qtuiloader.createLayout()", 'kind': 'f' },
\ { 'word': "qtuiloader.createWidget()", 'kind': 'f' },
\ { 'word': "qtuiloader.load()", 'kind': 'f' },
\ { 'word': "qtuiloader.loader()", 'kind': 'f' },
\ { 'word': "qtuiloader._M", 'kind': 'm' },
\ { 'word': "qtuiloader._NAME", 'kind': 'm' },
\ { 'word': "qtuiloader._PACKAGE", 'kind': 'm' },
\ { 'word': "qt.void", 'kind': 'm' },
\ { 'word': "qtwidget.imageClass", 'kind': 'm' },
\ { 'word': "qtwidget._M", 'kind': 'm' },
\ { 'word': "qtwidget._NAME", 'kind': 'm' },
\ { 'word': "qtwidget.newimage()", 'kind': 'f' },
\ { 'word': "qtwidget.newpdf()", 'kind': 'f' },
\ { 'word': "qtwidget.newprint()", 'kind': 'f' },
\ { 'word': "qtwidget.newps()", 'kind': 'f' },
\ { 'word': "qtwidget.newsvg()", 'kind': 'f' },
\ { 'word': "qtwidget.newwindow()", 'kind': 'f' },
\ { 'word': "qtwidget._PACKAGE", 'kind': 'm' },
\ { 'word': "qtwidget.printerClass", 'kind': 'm' },
\ { 'word': "qtwidget.windowClass", 'kind': 'm' },
\ { 'word': "qt.xqcall()", 'kind': 'f' },
\ { 'word': "string.byte()", 'kind': 'f' },
\ { 'word': "string.char()", 'kind': 'f' },
\ { 'word': "string.dump()", 'kind': 'f' },
\ { 'word': "string.find()", 'kind': 'f' },
\ { 'word': "string.format()", 'kind': 'f' },
\ { 'word': "string.gfind()", 'kind': 'f' },
\ { 'word': "string.gmatch()", 'kind': 'f' },
\ { 'word': "string.gsub()", 'kind': 'f' },
\ { 'word': "string.len()", 'kind': 'f' },
\ { 'word': "string.lower()", 'kind': 'f' },
\ { 'word': "string.match()", 'kind': 'f' },
\ { 'word': "string.rep()", 'kind': 'f' },
\ { 'word': "string.reverse()", 'kind': 'f' },
\ { 'word': "string.strip()", 'kind': 'f' },
\ { 'word': "string.sub()", 'kind': 'f' },
\ { 'word': "string.upper()", 'kind': 'f' },
\ { 'word': "sys.basename()", 'kind': 'f' },
\ { 'word': "sys.clock()", 'kind': 'f' },
\ { 'word': "sys.COLORS", 'kind': 'm' },
\ { 'word': "sys.concat()", 'kind': 'f' },
\ { 'word': "sys.dir()", 'kind': 'f' },
\ { 'word': "sys.dirname()", 'kind': 'f' },
\ { 'word': "sys.dirp()", 'kind': 'f' },
\ { 'word': "sys.execute()", 'kind': 'f' },
\ { 'word': "sys.filep()", 'kind': 'f' },
\ { 'word': "sys.files()", 'kind': 'f' },
\ { 'word': "sys.fpath()", 'kind': 'f' },
\ { 'word': "sys.fstat()", 'kind': 'f' },
\ { 'word': "sys.isNaN()", 'kind': 'f' },
\ { 'word': "sys.la()", 'kind': 'f' },
\ { 'word': "sys._lib", 'kind': 'm' },
\ { 'word': "sys.ll()", 'kind': 'f' },
\ { 'word': "sys.lla()", 'kind': 'f' },
\ { 'word': "sys.ls()", 'kind': 'f' },
\ { 'word': "sys._M", 'kind': 'm' },
\ { 'word': "sys._NAME", 'kind': 'm' },
\ { 'word': "sys.OS", 'kind': 'm' },
\ { 'word': "sys._PACKAGE", 'kind': 'm' },
\ { 'word': "sys.prefix", 'kind': 'm' },
\ { 'word': "sys.pwd()", 'kind': 'f' },
\ { 'word': "sys.sleep()", 'kind': 'f' },
\ { 'word': "sys.split()", 'kind': 'f' },
\ { 'word': "sys.tic()", 'kind': 'f' },
\ { 'word': "sys.toc()", 'kind': 'f' },
\ { 'word': "sys.uname()", 'kind': 'f' },
\ { 'word': "sys.usleep()", 'kind': 'f' },
\ { 'word': "table.concat()", 'kind': 'f' },
\ { 'word': "table.foreach()", 'kind': 'f' },
\ { 'word': "table.foreachi()", 'kind': 'f' },
\ { 'word': "table.getn()", 'kind': 'f' },
\ { 'word': "table.insert()", 'kind': 'f' },
\ { 'word': "table.last()", 'kind': 'f' },
\ { 'word': "table.maxn()", 'kind': 'f' },
\ { 'word': "table.remove()", 'kind': 'f' },
\ { 'word': "table.setn()", 'kind': 'f' },
\ { 'word': "table.sort()", 'kind': 'f' },
\ { 'word': "torch.abs()", 'kind': 'f' },
\ { 'word': "torch.acos()", 'kind': 'f' },
\ { 'word': "torch.add()", 'kind': 'f' },
\ { 'word': "torch.addcdiv()", 'kind': 'f' },
\ { 'word': "torch.addcmul()", 'kind': 'f' },
\ { 'word': "torch.addmm()", 'kind': 'f' },
\ { 'word': "torch.addmv()", 'kind': 'f' },
\ { 'word': "torch.addr()", 'kind': 'f' },
\ { 'word': "torch.asin()", 'kind': 'f' },
\ { 'word': "torch.atan()", 'kind': 'f' },
\ { 'word': "torch.atan2()", 'kind': 'f' },
\ { 'word': "torch.bernoulli()", 'kind': 'f' },
\ { 'word': "torch.ByteStorage", 'kind': 'm' },
\ { 'word': "torch.ByteTensor", 'kind': 'm' },
\ { 'word': "torch.cat()", 'kind': 'f' },
\ { 'word': "torch.cauchy()", 'kind': 'f' },
\ { 'word': "torch.cdiv()", 'kind': 'f' },
\ { 'word': "torch.ceil()", 'kind': 'f' },
\ { 'word': "torch.CharStorage", 'kind': 'm' },
\ { 'word': "torch.CharTensor", 'kind': 'm' },
\ { 'word': "torch.class()", 'kind': 'f' },
\ { 'word': "torch.CmdLine", 'kind': 'm' },
\ { 'word': "torch.cmul()", 'kind': 'f' },
\ { 'word': "torch.conv2()", 'kind': 'f' },
\ { 'word': "torch.conv3()", 'kind': 'f' },
\ { 'word': "torch.cos()", 'kind': 'f' },
\ { 'word': "torch.cosh()", 'kind': 'f' },
\ { 'word': "torch.cross()", 'kind': 'f' },
\ { 'word': "torch.cumprod()", 'kind': 'f' },
\ { 'word': "torch.cumsum()", 'kind': 'f' },
\ { 'word': "torch.diag()", 'kind': 'f' },
\ { 'word': "torch.DiskFile", 'kind': 'm' },
\ { 'word': "torch.dist()", 'kind': 'f' },
\ { 'word': "torch.div()", 'kind': 'f' },
\ { 'word': "torch.dot()", 'kind': 'f' },
\ { 'word': "torch.DoubleStorage", 'kind': 'm' },
\ { 'word': "torch.DoubleTensor", 'kind': 'm' },
\ { 'word': "torch.eig()", 'kind': 'f' },
\ { 'word': "torch.eq()", 'kind': 'f' },
\ { 'word': "torch.exp()", 'kind': 'f' },
\ { 'word': "torch.exponential()", 'kind': 'f' },
\ { 'word': "torch.eye()", 'kind': 'f' },
\ { 'word': "torch.factory()", 'kind': 'f' },
\ { 'word': "torch.File", 'kind': 'm' },
\ { 'word': "torch.fill()", 'kind': 'f' },
\ { 'word': "torch.FloatStorage", 'kind': 'm' },
\ { 'word': "torch.FloatTensor", 'kind': 'm' },
\ { 'word': "torch.floor()", 'kind': 'f' },
\ { 'word': "torch.ge()", 'kind': 'f' },
\ { 'word': "torch.gels()", 'kind': 'f' },
\ { 'word': "torch.geometric()", 'kind': 'f' },
\ { 'word': "torch.ger()", 'kind': 'f' },
\ { 'word': "torch.gesv()", 'kind': 'f' },
\ { 'word': "torch.getconstructortable()", 'kind': 'f' },
\ { 'word': "torch.getdefaulttensortype()", 'kind': 'f' },
\ { 'word': "torch.getenv()", 'kind': 'f' },
\ { 'word': "torch.getmetatable()", 'kind': 'f' },
\ { 'word': "torch.getnumthreads()", 'kind': 'f' },
\ { 'word': "torch.gt()", 'kind': 'f' },
\ { 'word': "torch.histc()", 'kind': 'f' },
\ { 'word': "torch.id()", 'kind': 'f' },
\ { 'word': "torch.include()", 'kind': 'f' },
\ { 'word': "torch.initialSeed()", 'kind': 'f' },
\ { 'word': "torch.IntStorage", 'kind': 'm' },
\ { 'word': "torch.IntTensor", 'kind': 'm' },
\ { 'word': "torch.inverse()", 'kind': 'f' },
\ { 'word': "torch.isequal()", 'kind': 'f' },
\ { 'word': "torch.le()", 'kind': 'f' },
\ { 'word': "torch.linspace()", 'kind': 'f' },
\ { 'word': "torch.load()", 'kind': 'f' },
\ { 'word': "torch.loadobj()", 'kind': 'f' },
\ { 'word': "torch.log()", 'kind': 'f' },
\ { 'word': "torch.log1p()", 'kind': 'f' },
\ { 'word': "torch.logNormal()", 'kind': 'f' },
\ { 'word': "torch.logspace()", 'kind': 'f' },
\ { 'word': "torch.LongStorage", 'kind': 'm' },
\ { 'word': "torch.LongTensor", 'kind': 'm' },
\ { 'word': "torch.lt()", 'kind': 'f' },
\ { 'word': "torch.manualSeed()", 'kind': 'f' },
\ { 'word': "torch.max()", 'kind': 'f' },
\ { 'word': "torch.mean()", 'kind': 'f' },
\ { 'word': "torch.MemoryFile", 'kind': 'm' },
\ { 'word': "torch.min()", 'kind': 'f' },
\ { 'word': "torch.mm()", 'kind': 'f' },
\ { 'word': "torch.mul()", 'kind': 'f' },
\ { 'word': "torch.mv()", 'kind': 'f' },
\ { 'word': "torch.ne()", 'kind': 'f' },
\ { 'word': "torch.newmetatable()", 'kind': 'f' },
\ { 'word': "torch.norm()", 'kind': 'f' },
\ { 'word': "torch.normal()", 'kind': 'f' },
\ { 'word': "torch.numel()", 'kind': 'f' },
\ { 'word': "torch.ones()", 'kind': 'f' },
\ { 'word': "torch.packageLuaPath()", 'kind': 'f' },
\ { 'word': "torch.PipeFile", 'kind': 'm' },
\ { 'word': "torch.pointer()", 'kind': 'f' },
\ { 'word': "torch.pow()", 'kind': 'f' },
\ { 'word': "torch.prod()", 'kind': 'f' },
\ { 'word': "torch.rand()", 'kind': 'f' },
\ { 'word': "torch.randn()", 'kind': 'f' },
\ { 'word': "torch.random()", 'kind': 'f' },
\ { 'word': "torch.randperm()", 'kind': 'f' },
\ { 'word': "torch.range()", 'kind': 'f' },
\ { 'word': "torch.reshape()", 'kind': 'f' },
\ { 'word': "torch.save()", 'kind': 'f' },
\ { 'word': "torch.saveobj()", 'kind': 'f' },
\ { 'word': "torch.seed()", 'kind': 'f' },
\ { 'word': "torch.__setdefaulttensortype()", 'kind': 'f' },
\ { 'word': "torch.setdefaulttensortype()", 'kind': 'f' },
\ { 'word': "torch.setenv()", 'kind': 'f' },
\ { 'word': "torch.setmetatable()", 'kind': 'f' },
\ { 'word': "torch.setnumthreads()", 'kind': 'f' },
\ { 'word': "torch.ShortStorage", 'kind': 'm' },
\ { 'word': "torch.ShortTensor", 'kind': 'm' },
\ { 'word': "torch.sign()", 'kind': 'f' },
\ { 'word': "torch.sin()", 'kind': 'f' },
\ { 'word': "torch.sinh()", 'kind': 'f' },
\ { 'word': "torch.sort()", 'kind': 'f' },
\ { 'word': "torch.sqrt()", 'kind': 'f' },
\ { 'word': "torch.squeeze()", 'kind': 'f' },
\ { 'word': "torch.std()", 'kind': 'f' },
\ { 'word': "torch.Storage", 'kind': 'm' },
\ { 'word': "torch.sum()", 'kind': 'f' },
\ { 'word': "torch.svd()", 'kind': 'f' },
\ { 'word': "torch.symeig()", 'kind': 'f' },
\ { 'word': "torch.tan()", 'kind': 'f' },
\ { 'word': "torch.tanh()", 'kind': 'f' },
\ { 'word': "torch.Tensor", 'kind': 'm' },
\ { 'word': "torch.test()", 'kind': 'f' },
\ { 'word': "torch.Tester", 'kind': 'm' },
\ { 'word': "torch.tic()", 'kind': 'f' },
\ { 'word': "torch.Timer", 'kind': 'm' },
\ { 'word': "torch.toc()", 'kind': 'f' },
\ { 'word': "torch.trace()", 'kind': 'f' },
\ { 'word': "torch.tril()", 'kind': 'f' },
\ { 'word': "torch.triu()", 'kind': 'f' },
\ { 'word': "torch.typename()", 'kind': 'f' },
\ { 'word': "torch.typename2id()", 'kind': 'f' },
\ { 'word': "torch.uniform()", 'kind': 'f' },
\ { 'word': "torch.var()", 'kind': 'f' },
\ { 'word': "torch.version()", 'kind': 'f' },
\ { 'word': "torch.xcorr2()", 'kind': 'f' },
\ { 'word': "torch.xcorr3()", 'kind': 'f' },
\ { 'word': "torch.zero()", 'kind': 'f' },
\ { 'word': "torch.zeros()", 'kind': 'f' },
\ { 'word': "wrap.argtypes", 'kind': 'm' },
\ { 'word': "wrap.CInterface", 'kind': 'm' },
\ { 'word': "xlua.clear()", 'kind': 'f' },
\ { 'word': "xlua.clearall()", 'kind': 'f' },
\ { 'word': "xlua.error()", 'kind': 'f' },
\ { 'word': "xlua.installed()", 'kind': 'f' },
\ { 'word': "xlua.log()", 'kind': 'f' },
\ { 'word': "xlua._M", 'kind': 'm' },
\ { 'word': "xlua._NAME", 'kind': 'm' },
\ { 'word': "xlua.OptionParser()", 'kind': 'f' },
\ { 'word': "xlua._PACKAGE", 'kind': 'm' },
\ { 'word': "xlua.print()", 'kind': 'f' },
\ { 'word': "xlua.Profiler()", 'kind': 'f' },
\ { 'word': "xlua.progress()", 'kind': 'f' },
\ { 'word': "xlua.require()", 'kind': 'f' },
\ { 'word': "xlua.trycatch()", 'kind': 'f' },
\ { 'word': "xlua.unpack()", 'kind': 'f' },
\ { 'word': "xlua.unpack_class()", 'kind': 'f' },
\ { 'word': "xlua.usage()", 'kind': 'f' },
\ { 'word': "xlua.usage_module()", 'kind': 'f' },
\ { 'word': "xlua.who()", 'kind': 'f' },]

" Function signatures. {{{1
" Sources:
"  - http://www.lua.org/manual/5.1/manual.html#5
"  - http://w3.impa.br/~diego/software/luasocket/reference.html

let g:xolox#lua_data#signatures = {
      \ 'assert': 'assert(v [, message])',
      \ 'collectgarbage': 'collectgarbage(opt [, arg])',
      \ 'dofile': 'dofile(filename)',
      \ 'error': 'error(message [, level])',
      \ 'getfenv': 'getfenv([f])',
      \ 'getmetatable': 'getmetatable(object)',
      \ 'ipairs': 'ipairs(t)',
      \ 'load': 'load(func [, chunkname])',
      \ 'loadfile': 'loadfile([filename])',
      \ 'loadstring': 'loadstring(string [, chunkname])',
      \ 'next': 'next(table [, index])',
      \ 'pairs': 'pairs(t)',
      \ 'pcall': 'pcall(f, arg1, ...)',
      \ 'print': 'print(...)',
      \ 'rawequal': 'rawequal(v1, v2)',
      \ 'rawget': 'rawget(table, index)',
      \ 'rawset': 'rawset(table, index, value)',
      \ 'select': 'select(index, ...)',
      \ 'setfenv': 'setfenv(f, table)',
      \ 'setmetatable': 'setmetatable(table, metatable)',
      \ 'tonumber': 'tonumber(e [, base])',
      \ 'tostring': 'tostring(e)',
      \ 'type': 'type(v)',
      \ 'unpack': 'unpack(list [, i [, j]])',
      \ 'xpcall': 'xpcall(f, err)',
      \ 'coroutine.create': 'coroutine.create(f)',
      \ 'coroutine.resume': 'coroutine.resume(co [, val1, ...])',
      \ 'coroutine.running': 'coroutine.running()',
      \ 'coroutine.status': 'coroutine.status(co)',
      \ 'coroutine.wrap': 'coroutine.wrap(f)',
      \ 'coroutine.yield': 'coroutine.yield(...)',
      \ 'module': 'module(name [, ...])',
      \ 'require': 'require(modname)',
      \ 'package.loadlib': 'package.loadlib(libname, funcname)',
      \ 'package.seeall': 'package.seeall(module)',
      \ 'string.byte': 'string.byte(s [, i [, j]])',
      \ 'string.char': 'string.char(...)',
      \ 'string.dump': 'string.dump(function)',
      \ 'string.find': 'string.find(s, pattern [, init [, plain]])',
      \ 'string.format': 'string.format(formatstring, ...)',
      \ 'string.gmatch': 'string.gmatch(s, pattern)',
      \ 'string.gsub': 'string.gsub(s, pattern, repl [, n])',
      \ 'string.len': 'string.len(s)',
      \ 'string.lower': 'string.lower(s)',
      \ 'string.match': 'string.match(s, pattern [, init])',
      \ 'string.rep': 'string.rep(s, n)',
      \ 'string.reverse': 'string.reverse(s)',
      \ 'string.sub': 'string.sub(s, i [, j])',
      \ 'string.upper': 'string.upper(s)',
      \ 'table.concat': 'table.concat(table [, sep [, i [, j]]])',
      \ 'table.insert': 'table.insert(table, [pos,] value)',
      \ 'table.maxn': 'table.maxn(table)',
      \ 'table.remove': 'table.remove(table [, pos])',
      \ 'table.sort': 'table.sort(table [, comp])',
      \ 'math.abs': 'math.abs(x)',
      \ 'math.acos': 'math.acos(x)',
      \ 'math.asin': 'math.asin(x)',
      \ 'math.atan': 'math.atan(x)',
      \ 'math.atan2': 'math.atan2(y, x)',
      \ 'math.ceil': 'math.ceil(x)',
      \ 'math.cos': 'math.cos(x)',
      \ 'math.cosh': 'math.cosh(x)',
      \ 'math.deg': 'math.deg(x)',
      \ 'math.exp': 'math.exp(x)',
      \ 'math.floor': 'math.floor(x)',
      \ 'math.fmod': 'math.fmod(x, y)',
      \ 'math.frexp': 'math.frexp(x)',
      \ 'math.ldexp': 'math.ldexp(m, e)',
      \ 'math.log': 'math.log(x)',
      \ 'math.log10': 'math.log10(x)',
      \ 'math.max': 'math.max(x, ...)',
      \ 'math.min': 'math.min(x, ...)',
      \ 'math.modf': 'math.modf(x)',
      \ 'math.pow': 'math.pow(x, y)',
      \ 'math.rad': 'math.rad(x)',
      \ 'math.random': 'math.random([m [, n]])',
      \ 'math.randomseed': 'math.randomseed(x)',
      \ 'math.sin': 'math.sin(x)',
      \ 'math.sinh': 'math.sinh(x)',
      \ 'math.sqrt': 'math.sqrt(x)',
      \ 'math.tan': 'math.tan(x)',
      \ 'math.tanh': 'math.tanh(x)',
      \ 'io.close': 'io.close([file])',
      \ 'io.flush': 'io.flush()',
      \ 'io.input': 'io.input([file])',
      \ 'io.lines': 'io.lines([filename])',
      \ 'io.open': 'io.open(filename [, mode])',
      \ 'io.output': 'io.output([file])',
      \ 'io.popen': 'io.popen(prog [, mode])',
      \ 'io.read': 'io.read(...)',
      \ 'io.tmpfile': 'io.tmpfile()',
      \ 'io.type': 'io.type(obj)',
      \ 'io.write': 'io.write(...)',
      \ 'file:close': 'file:close()',
      \ 'file:flush': 'file:flush()',
      \ 'file:lines': 'file:lines()',
      \ 'file:read': 'file:read(...)',
      \ 'file:seek': 'file:seek([whence] [, offset])',
      \ 'file:setvbuf': 'file:setvbuf(mode [, size])',
      \ 'file:write': 'file:write(...)',
      \ 'os.clock': 'os.clock()',
      \ 'os.date': 'os.date([format [, time]])',
      \ 'os.difftime': 'os.difftime(t2, t1)',
      \ 'os.execute': 'os.execute([command])',
      \ 'os.exit': 'os.exit([code])',
      \ 'os.getenv': 'os.getenv(varname)',
      \ 'os.remove': 'os.remove(filename)',
      \ 'os.rename': 'os.rename(oldname, newname)',
      \ 'os.setlocale': 'os.setlocale(locale [, category])',
      \ 'os.time': 'os.time([table])',
      \ 'os.tmpname': 'os.tmpname()',
      \ 'debug.debug': 'debug.debug()',
      \ 'debug.getfenv': 'debug.getfenv(o)',
      \ 'debug.gethook': 'debug.gethook([thread])',
      \ 'debug.getinfo': 'debug.getinfo([thread,] function [, what])',
      \ 'debug.getlocal': 'debug.getlocal([thread,] level, local)',
      \ 'debug.getmetatable': 'debug.getmetatable(object)',
      \ 'debug.getregistry': 'debug.getregistry()',
      \ 'debug.getupvalue': 'debug.getupvalue(func, up)',
      \ 'debug.setfenv': 'debug.setfenv(object, table)',
      \ 'debug.sethook': 'debug.sethook([thread,] hook, mask [, count])',
      \ 'debug.setlocal': 'debug.setlocal([thread,] level, local, value)',
      \ 'debug.setmetatable': 'debug.setmetatable(object, table)',
      \ 'debug.setupvalue': 'debug.setupvalue(func, up, value)',
      \ 'debug.traceback': 'debug.traceback([thread,] [message] [, level])',
      \
      \ 'ftp.get': 'ftp.get(url)',
      \ 'ftp.put': 'ftp.put(url, content)',
      \ 'http.request': 'http.request(url [, body])',
      \ 'ltn12.filter.chain': 'ltn12.filter.chain(filter1, filter2 [, ... filterN])',
      \ 'ltn12.filter.cycle': 'ltn12.filter.cycle(low [, ctx, extra])',
      \ 'ltn12.pump.all': 'ltn12.pump.all(source, sink)',
      \ 'ltn12.pump.step': 'ltn12.pump.step(source, sink)',
      \ 'ltn12.sink.chain': 'ltn12.sink.chain(filter, sink)',
      \ 'ltn12.sink.error': 'ltn12.sink.error(message)',
      \ 'ltn12.sink.file': 'ltn12.sink.file(handle, message)',
      \ 'ltn12.sink.simplify': 'ltn12.sink.simplify(sink)',
      \ 'ltn12.sink.table': 'ltn12.sink.table([table])',
      \ 'ltn12.source.cat': 'ltn12.source.cat(source1 [, source2, ..., sourceN])',
      \ 'ltn12.source.chain': 'ltn12.source.chain(source, filter)',
      \ 'ltn12.source.empty': 'ltn12.source.empty()',
      \ 'ltn12.source.error': 'ltn12.source.error(message)',
      \ 'ltn12.source.file': 'ltn12.source.file(handle, message)',
      \ 'ltn12.source.simplify': 'ltn12.source.simplify(source)',
      \ 'ltn12.source.string': 'ltn12.source.string(string)',
      \ 'mime.decode': "mime.decode('base64' or 'quoted-printable')",
      \ 'mime.encode': "mime.encode('base64' or 'quoted-printable' [, mode])",
      \ 'mime.normalize': 'mime.normalize([marker])',
      \ 'mime.wrap': "mime.wrap('base64' or 'quoted-printable' or 'text' [, length])",
      \ 'smtp.message': 'smtp.message(mesgt)',
      \ 'socket.bind': 'socket.bind(address, port [, backlog])',
      \ 'socket.connect': 'socket.connect(address, port [, locaddr, locport])',
      \ 'socket.dns.tohostname': 'socket.dns.tohostname(address)',
      \ 'socket.dns.toip': 'socket.dns.toip(address)',
      \ 'socket.newtry': 'socket.newtry(finalizer)',
      \ 'socket.protect': 'socket.protect(func)',
      \ 'socket.select': 'socket.select(recvt, sendt [, timeout])',
      \ 'socket.sink': 'socket.sink(mode, socket)',
      \ 'socket.skip': 'socket.skip(d [, ret1, ret2 ... retN])',
      \ 'socket.sleep': 'socket.sleep(time)',
      \ 'socket.source': 'socket.source(mode, socket [, length])',
      \ 'socket.try': 'socket.try(ret1 [, ret2 ... retN])',
      \ 'url.absolute': 'url.absolute(base, relative)',
      \ 'url.build': 'url.build(parsed_url)',
      \ 'url.build_path': 'url.build_path(segments, unsafe)',
      \ 'url.escape': 'url.escape(content)',
      \ 'url.parse': 'url.parse(url, default)',
      \ 'url.parse_path': 'url.parse_path(path)',
      \ 'url.unescape': 'url.unescape(content)' }

" }}}

" Restore compatibility options.
let &cpo = s:cpo_save
unlet s:cpo_save

" vim: ts=2 sw=2 et
